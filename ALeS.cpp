#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <string.h>
#include <math.h>
#include <fstream>
#include <time.h>
#include <random>
#include <iostream>
#include <bitset>
#include <chrono>
#if defined(__APPLE__)
	#include <sys/types.h>
	#include <sys/sysctl.h>
#elif defined(__linux__) || defined(__linux) || defined(linux) || defined(__gnu_linux__)
	#include <omp.h>
	#include <sys/sysinfo.h>
#endif


using namespace std;

int* l;								// Seeds lengths
int k; 								// Number of seeds
int N;								// Length of the random region R
double p;							// Similarity level
int w;								// Weight
bool mode;							// mode decides if sensitivity (0) or estimated sensitivity (1) will be used.
bool bestMode = 0;					// variable used to control print statement
int estCount = 0;					// variable used to control print statement
double optimized_best = 0.0;		// holds the best sensitivity obtained in the function findOptimal()
int original_m = 0;					// resets the m value in adaptive length algorithm
int original_M = 0;					// resets the M value in adaptive length algorithm
bool isRegionCreated = false;		// makes sure homologous_array is created only once

/*
 * Precomputed arrays:
 * seedLength_min_k2L, seedLength_min_k3L, seedLength_min_k4L, seedLength_min_k10L are the precomputed arrays for minimum
 * length of the seeds for low similarities (p < 0.85).
 * seedLength_max_k2L, seedLength_max_k3L, seedLength_max_k4L, seedLength_max_k10L are the precomputed arrays for maximum
 * length of low similarities (p < 0.85)
 * seedLength_min_k2H, seedLength_min_k3H, seedLength_min_k4H, seedLength_min_k10H are the precomputed arrays for minimum
 * length of the seeds for high similarities (p >= 0.85).
 * seedLength_max_k2H, seedLength_max_k3H, seedLength_max_k4H, seedLength_max_k10H are the precomputed arrays for maximum
 * length of the seeds for high similarities (p >= 0.85)
 */
int seedLength_min_k2L[13][66] = {
	{13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  15,  15,  15,  15,  15,  15,  15},
	{13,  13,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  18,  18,  18,  18},
	{14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  19,  19,  19,  19},
	{16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20},
	{18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21},
	{19,  19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  23,  23,  23,  24},
	{19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26},
	{19,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27},
	{20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27},
	{21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29},
	{22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  30,  30,  31,  31,  32,  32},
	{23,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  33,  34},
	{25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32},
};
int seedLength_min_k3L[13][66] = {
	{12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16},
	{13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  16,  16,  16,  16},
	{14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  18,  18,  18,  18,  18,  18},
	{15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21},
	{16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23},
	{17,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23},
	{19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23},
	{20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25},
	{21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28},
	{22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29},
	{22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30},
	{23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  31},
	{24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32},
};
int seedLength_min_k4L[13][66] = {
	{12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  14,  14,  14,  14,  14,  14,  14},
	{13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  17,  17,  17},
	{14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19},
	{15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20},
	{16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20},
	{17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  21,  21},
	{18,  18,  18,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22},
	{19,  19,  19,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24},
	{20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25},
	{21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  26,  26,  26,  26,  26,  26,  26},
	{22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  27,  27,  27,  27},
	{23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  28,  28,  28},
	{24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30},
};
int seedLength_min_k10L[13][66] = {
	{12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13},
	{14,  14,  14,  14,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  13},
	{15,  15,  15,  15,  15,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15},
	{15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17},
	{16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  19,  19},
	{17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  20,  20,  20},
	{18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21},
	{19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21},
	{20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22},
	{21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23},
	{23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  25,  25,  25,  25},
	{24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  26},
	{24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27},
};
int seedLength_max_k2L[13][66] = {
	{18,  18,  18,  18,  18,  18,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  21,  21,  21,  21,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23},
	{18,  17,  17,  17,  17,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  19,  19,  19,  20,  20,  20,  21,  21,  21,  22,  22,  22,  22,  23,  23,  23,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  26,  26,  26,  26,  26,  26},
	{19,  19,  19,  19,  19,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28},
	{21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30},
	{23,  23,  24,  24,  24,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31},
	{24,  24,  25,  25,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32},
	{24,  24,  25,  25,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33},
	{24,  25,  25,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  36,  36},
	{25,  25,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  37,  37,  38,  38,  39,  39},
	{27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  40,  40},
	{28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  40,  40},
	{28,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40},
	{27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  33,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41},
};
int seedLength_max_k3L[13][66] = {
	{ 22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28},
	{22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  26,  26,  26},
	{22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27},
	{22,  23,  23,  24,  24,  25,  25,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29},
	{23,  24,  25,  25,  26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  30,  30,  30,  30,  30,  30,  30,  30,  30,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  31,  31,  32,  32},
	{25,  25,  26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34,  34},
	{26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  37,  37},
	{27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  37,  37,  37,  37,  38,  38,  39,  39,  39,  40},
	{27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  42,  42},
	{27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43},
	{28,  28,  29,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  33,  33,  33,  34,  34,  35,  35,  35,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  43,  43,  43},
	{29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  37,  37,  37,  38,  38,  39,  39,  39,  40,  40,  41,  41,  41,  42,  42,  42,  43,  43,  43,  44,  44,  44,  44,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  44,  44,  44},
	{30,  31,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  45,  45,  45,  45,  46,  46},
};
int seedLength_max_k4L[13][66] = {
	{23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23},
	{22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  30},
	{23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34},
	{24,  25,  25,  25,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  35,  35,  35},
	{25,  26,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  36},
	{25,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  37,  37,  37},
	{26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39},
	{27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  40,  40},
	{28,  29,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  40,  40,  41,  41},
	{28,  28,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  42,  42,  42},
	{27,  28,  28,  29,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  43,  43,  43,  43},
	{27,  27,  28,  28,  29,  30,  30,  31,  31,  32,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  39,  39,  40,  40,  41,  41,  41,  42,  42,  43,  43,  43,  44,  44,  44,  45,  45,  45,  45,  46,  46,  46,  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  46,  46,  46,  46,  46,  45,  45,  45,  44},
	{ 28,  28,  29,  29,  30,  30,  31,  31,  32,  32,  33,  33,  34,  34,  35,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  40,  40,  40,  41,  41,  41,  42,  42,  42,  43,  43,  43,  43,  44,  44,  44,  44,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46},
};
int seedLength_max_k10L[13][66] = {
	{22,  22,  22,  22,  22,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32},
	{23,  23,  23,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33},
	{23,  24,  24,  25,  26,  26,  27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34},
	{23,  24,  25,  26,  26,  27,  27,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34,  35,  35},
	{24,  25,  25,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  35,  35,  36,  36},
	{25,  26,  26,  27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  37,  37},
	{26,  26,  27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38},
	{27,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  33,  34,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39},
	{27,  27,  28,  28,  29,  29,  29,  30,  30,  31,  31,  31,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  40,  40,  40,  40},
	{27,  27,  28,  28,  29,  29,  30,  30,  31,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  42,  42,  42,  42,  42,  42,  42,  42,  42,  41,  41,  41},
	{27,  27,  28,  28,  29,  29,  30,  30,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  36,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  42,  42,  42},
	{28,  28,  29,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  34,  34,  35,  35,  35,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  43,  43,  43,  43,  43,  43,  43},
	{29,  30,  30,  31,  31,  32,  32,  33,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  43,  43,  43,  43},
};
int seedLength_min_k2H[13][66] = {
	{13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  15,  15,  15,  15,  15,  15,  15},
	{13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  18,  18,  18,  18,  18,  18},
	{14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  19,  19,  19,  19},
	{16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20},
	{18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21},
	{19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24},
	{19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26},
	{20,  20,  21,  21,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  27},
	{21,  21,  22,  22,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  27,  27},
	{22,  22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29},
	{22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32},
	{23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34},
	{25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32},
};
int seedLength_min_k3H[13][66] = {
	{12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16},
	{13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  17,  17,  17},
	{14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  18,  18,  18,  18,  18,  18},
	{15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19},
	{16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20},
	{18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21},
	{20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23},
	{21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25},
	{22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  27,  27},
	{22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28},
	{22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  28,  28,  28},
	{22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  29,  29,  29,  29,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  30,  30,  30,  29,  29},
	{24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32},
};
int seedLength_min_k4H[13][66] = {
	{12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  14,  14,  14,  14,  14,  14,  14},
	{13,  13,  12,  12,  12,  12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16},
	{14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17},
	{16,  16,  16,  16,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  17,  17,  17,  17,  17},
	{17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18},
	{17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20},
	{18,  18,  18,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22},
	{19,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  24},
	{21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  25,  25,  25},
	{22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26},
	{22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  27,  27,  27,  27,  27,  27,  27,  27},
	{23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  28,  28,  28,  28},
	{24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29},
};
int seedLength_min_k10H[13][66] = {
	{12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12,  12},
	{13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14},
	{14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15},
	{15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  15,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16},
	{16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  17,  17,  17},
	{17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19},
	{18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21},
	{19,  19,  19,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22},
	{20,  20,  21,  21,  21,  21,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22},
	{21,  22,  22,  22,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23},
	{23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  25,  25},
	{24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  27},
	{24,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27},
};
int seedLength_max_k2H[13][66] = {
	{18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,  20,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23},
	{19,  19,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  21,  21,  21,  21,  21,  22,  22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27},
	{20,  20,  20,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  21,  21,  21,  21,  22,  22,  22,  22,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29},
	{21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  30,  30,  30},
	{23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31},
	{25,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32},
	{26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33},
	{27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  36,  36},
	{27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  38,  38,  39,  39},
	{27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40},
	{28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  41,  40,  40,  40},
	{29,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  42,  42,  42,  42,  41,  41,  41,  40},
	{29,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43},
};
int seedLength_max_k3H[13][66] = {
	{22,  22,  22,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  25,  25,  25},
	{22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27},
	{23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29},
	{25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31},
	{26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  33,  33},
	{27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35,  35},
	{27,  27,  28,  28,  28,  29,  29,  29,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37},
	{28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  37,  37,  37,  38,  38,  39,  39,  40},
	{28,  29,  29,  30,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  41,  41,  42},
	{28,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  43,  43,  43},
	{28,  29,  30,  30,  31,  32,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  37,  38,  38,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44,  44},
	{28,  29,  30,  30,  31,  32,  32,  33,  34,  34,  35,  35,  36,  36,  37,  37,  38,  38,  39,  39,  40,  40,  41,  41,  41,  42,  42,  43,  43,  43,  43,  44,  44,  44,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  46,  45,  45,  45,  45},
	{30,  31,  31,  32,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  40,  40,  41,  41,  41,  42,  42,  42,  43,  43,  43,  44,  44,  44,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  46,  46,  46,  46},
};
int seedLength_max_k4H[13][66] = {
	{23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  25,  25,  25,  25,  25,  24,  24,  24,  23,  23},
	{25,  25,  24,  24,  24,  24,  24,  24,  23,  23,  23,  23,  23,  23,  23,  24,  24,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31},
	{26,  26,  26,  26,  26,  26,  25,  25,  25,  26,  26,  26,  26,  26,  26,  26,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32},
	{26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31},
	{26,  27,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31},
	{26,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  35},
	{26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  38,  38,  39,  39},
	{27,  28,  28,  29,  29,  30,  30,  31,  31,  32,  32,  32,  33,  33,  33,  34,  34,  34,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  41},
	{28,  29,  29,  30,  31,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41},
	{29,  29,  30,  31,  32,  32,  33,  34,  34,  35,  35,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42},
	{29,  30,  31,  31,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43},
	{29,  30,  31,  31,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  39,  39,  39,  40,  40,  40,  41,  41,  41,  42,  42,  42,  42,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  44,  44,  44,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45,  45},
	{30,  31,  31,  32,  32,  33,  33,  34,  35,  35,  36,  36,  37,  37,  38,  38,  38,  39,  39,  40,  40,  41,  41,  41,  42,  42,  42,  43,  43,  43,  44,  44,  44,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  47,  46,  46,  46,  46},
};
int seedLength_max_k10H[13][66] = {
	{24,  24,  23,  23,  23,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,  23,  23,  23,  23,  24,  24,  24,  24,  25,  25,  25,  25,  26,  26,  26,  27,  27,  27,  27,  28,  28,  28,  28,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  29,  29,  29,  29,  28,  28},
	{25,  25,  25,  26,  26,  26,  27,  27,  27,  27,  27,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  29,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  32,  32},
	{25,  26,  26,  27,  27,  28,  28,  29,  29,  29,  30,  30,  30,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  33,  33,  33,  34,  34},
	{25,  26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  34,  34,  34,  35,  35},
	{26,  27,  27,  28,  28,  29,  29,  30,  30,  30,  31,  31,  31,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  35,  35,  36,  36},
	{27,  27,  28,  29,  29,  30,  31,  31,  31,  32,  32,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  33,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  32,  33,  33,  33,  34,  34,  35,  35,  36,  36,  37},
	{27,  28,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  35,  34,  34,  34,  34,  34,  34,  33,  33,  33,  33,  33,  33,  33,  33,  32,  32,  32,  32,  32,  32,  33,  33,  33,  33,  33,  33,  34,  34,  35,  35,  35,  36,  37,  37,  38},
	{27,  28,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  37,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  38,  38,  39,  39},
	{27,  28,  29,  29,  30,  31,  31,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40,  40},
	{28,  29,  29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  42,  41,  41,  41,  41,  41},
	{29,  30,  30,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  39,  40,  40,  40,  40,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  42,  42,  42,  42,  42,  42,  42},
	{30,  30,  31,  31,  32,  32,  33,  33,  34,  34,  34,  35,  35,  36,  36,  36,  37,  37,  37,  38,  38,  38,  39,  39,  39,  39,  40,  40,  40,  40,  40,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43},
	{29,  30,  30,  31,  32,  32,  33,  33,  34,  34,  35,  35,  36,  36,  37,  37,  37,  38,  38,  39,  39,  39,  39,  40,  40,  40,  41,  41,  41,  41,  42,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  44,  44,  44,  44,  44,  44,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43,  43},
};

typedef __uint128_t uint128_t;
int const array_size = 100000000;			// size of array (10^8) used for calculating estimated sensitivity
uint128_t *homologous_array_128;			// can store upto 128 bit long random region
uint64_t *homologous_array_64;				// can store upto 64 bit long random region
uint32_t *homologous_array_32;				// can store upto 32 bit long random region
long double totalVirtualMem = 0.0;			// total memory of system - decides when to switch to estimated sensitivity
int homologous_array_size = 0;				// size of the homologous array to be created if necessary

// prints an array (used for printing seeds)
void printArray2(char** array,int length)
{
	for (int i=0;i<length;i++){
		cout<<array[i]<<endl;
	}
	cout<<endl;
}

// updates OM[k][cur_seed] (or [cur_seed][k]) due to swapping 1 with 0 in positions i(1) and j(0) in cur_seed
// swapping already performed !!!
void UPDATE_OM (int8_t**** OM, int* length, int k, int cur_seed, int i, int j) 
{
	int cur_seed_length = length[cur_seed], k_seed_length = length[k], l = 0;
	if (k < cur_seed) {
		for (l=0; l<k_seed_length; ++l)	{
			if (OM[k][cur_seed][l][i] == 1)	OM[k][cur_seed][l][i] = -1;
			else							OM[k][cur_seed][l][i] =  0;
			if (OM[k][cur_seed][l][j] == -1)OM[k][cur_seed][l][j] =  1;
			else							OM[k][cur_seed][l][j] = -1;
		}							
	}
	if (k > cur_seed) {							
		for (l=0; l<k_seed_length; ++l)	{
			if (OM[cur_seed][k][i][l] == 1) OM[cur_seed][k][i][l] = -1;
			else							OM[cur_seed][k][i][l] =  0;
			if (OM[cur_seed][k][j][l] == -1)OM[cur_seed][k][j][l] =  1;
			else 							OM[cur_seed][k][j][l] = -1;
		}							
	}
	if (k == cur_seed) {							
		for (l=0; l<cur_seed_length; ++l)	
			if ((l!=i) && (l!=j)) {
				if (OM[cur_seed][cur_seed][l][i] == 1)  OM[cur_seed][cur_seed][l][i] = -1;
				else									OM[cur_seed][cur_seed][l][i] =  0;
				if (OM[cur_seed][cur_seed][l][j] == -1) OM[cur_seed][cur_seed][l][j] =  1;
				else									OM[cur_seed][cur_seed][l][j] = -1;
			}				
		for (l=0; l<cur_seed_length; ++l)	
			if ((l!=i) && (l!=j)) {
				if (OM[cur_seed][cur_seed][i][l] == 1)  OM[cur_seed][cur_seed][i][l] = -1;
				else									OM[cur_seed][cur_seed][i][l] =  0;
				if (OM[cur_seed][cur_seed][j][l] == -1) OM[cur_seed][cur_seed][j][l] =  1;
				else									OM[cur_seed][cur_seed][j][l] = -1;
			}
		OM[cur_seed][cur_seed][i][i] = 0;
		OM[cur_seed][cur_seed][j][j] = 1;
	}
}

// updates sigma[k][cur_seed] (or [cur_seed][k]) due to swapping 1 with 0 in positions i(1) and j(0) in cur_seed
// swapping is not performed !!!
void UPDATE_SIGMA (int8_t**** OM, int8_t* tempSigma, int* length, int k, int cur_seed, int i, int j) 
{
	int cur_seed_length = length[cur_seed], k_seed_length = length[k], l = 0;
	if (k < cur_seed) {
		for (l=0; l<k_seed_length; ++l)	{
			if (OM[k][cur_seed][l][i] == 1)
				--tempSigma[cur_seed_length-1+l-i];
			if (OM[k][cur_seed][l][j] == -1)
				++tempSigma[cur_seed_length-1+l-j];										
		}							
	}
	if (k > cur_seed) {							
		for (l=0; l<k_seed_length; ++l)	{
			if (OM[cur_seed][k][i][l] == 1)
				--tempSigma[k_seed_length-1+i-l];
			if (OM[cur_seed][k][j][l] == -1)
				++tempSigma[k_seed_length-1+j-l];										
		}							
	}
	if (k == cur_seed) {							
		for (l=0; l<cur_seed_length; ++l)	
			if ((l!=i) && (l!=j)) {
				if (OM[cur_seed][cur_seed][l][i] == 1) 
					--tempSigma[cur_seed_length-1+l-i];
				if (OM[cur_seed][cur_seed][l][j] == -1) 
					++tempSigma[cur_seed_length-1+l-j];	
			}				
		for (l=0; l<cur_seed_length; ++l)	
			if ((l!=i) && (l!=j)) {
				if (OM[cur_seed][cur_seed][i][l] == 1) 
					--tempSigma[cur_seed_length-1+i-l]; 
				if (OM[cur_seed][cur_seed][j][l] == -1) 
					++tempSigma[cur_seed_length-1+j-l]; 
			}
	}
}

// swaps (fast) 1-* to improve overlaps of "seeds"
int64_t MULTIPLE_SWAP1_OVERLAPS_FAST(char** SEEDS, int NO_SEEDS)                
{   // until no longer possible; returns the overlaps obtained
	int64_t bestOC = 0, curOC = 0, oldOC = 0, k_cur_seed_OC = 0, k_best_seed_OC = 0;
	int found_swap=0, cur_seed=0, cur_seed_length = 0, best_i=0, best_j=0, 
	best_seed=0, k=0, no_swaps=0, i = 0, j = 0, l = 0, tmp = 0;
	// compute weight
	j = strlen(SEEDS[0]);
	int weight = 0;	for (i=0; i<j; i++) if (SEEDS[0][i] == '1') ++weight;
	// compute lengths
	int* length = new int [NO_SEEDS];
	for (i=0; i<NO_SEEDS; i++) 
		length[i] = strlen(SEEDS[i]);
	// create overlap matrices (OM), sigma arrays (sigma), OC matrix (OCM): 
	// OM[i][j], 0<=i<=j<=NO_SEEDS, is a length[i]xlength[j] matrix for overlaps between SEEDS[i] and SEEDS[j]
	// OM[.][.][k][l] =  1 for (1,1), 0 for (0,0), and -1 for (1,0) or (0,1)
	// sigma[i][j] contains the number of overlaps between SEEDS[i] and SEEDS[j] in all possible shifts
	// each overlaps comes from a NW-SE diagonal in OM[i][j]
	int8_t**** OM = new int8_t*** [NO_SEEDS];
	int8_t*** sigma = new int8_t** [NO_SEEDS];
	int64_t** OCM = new int64_t* [NO_SEEDS];
	int8_t* tempSigma = new int8_t [1000]; // will temporarily store each sigma[i][j] to process it
	int tempSigmaLength = 1000;
	for (i=0; i<NO_SEEDS; ++i) {
		OM[i] = new int8_t** [NO_SEEDS];
		OCM[i] = new int64_t [NO_SEEDS];
		sigma[i] = new int8_t* [NO_SEEDS];
		for (j=i; j<NO_SEEDS; ++j) {
			OCM[i][j] = 0;
			OM[i][j] = new int8_t* [length[i]];
			sigma[i][j] = new int8_t [length[i]+length[j]-1];
			for (k=0; k<length[i]+length[j]-1; ++k)
				sigma[i][j][k] = 0;
			for (k=0; k<length[i]; ++k) {
				OM[i][j][k] = new int8_t [length[j]];
				for (l=0; l<length[j]; ++l) 
					if ((SEEDS[i][k] == '1') && (SEEDS[j][l] == '1')) {
						OM[i][j][k][l] = 1;
						++sigma[i][j][length[j]-1+k-l];
					}
					else
						if ((SEEDS[i][k] != '1') && (SEEDS[j][l] != '1'))
							OM[i][j][k][l] = 0;
						else
							OM[i][j][k][l] = -1;
			}
			for (k=0; k<length[i]+length[j]-1; ++k)
				OCM[i][j] += (1 << (int)sigma[i][j][k]);
			curOC += OCM[i][j];
		}
	}
	// swap until no longer improving OC
	bestOC = curOC;
	do{
		found_swap = 0;
		for(cur_seed=0; cur_seed<NO_SEEDS; ++cur_seed) {
			cur_seed_length = length[cur_seed];
			for (i=1; i<cur_seed_length-1; ++i)
				for (j=1; j<cur_seed_length-1; ++j)
					if (SEEDS[cur_seed][i] == '1' && SEEDS[cur_seed][j] != '1') {
						// compute the OC after swapping positions i(1) and j(0) (without flipping)
						oldOC = curOC;
						for (k=0; k<NO_SEEDS; ++k) {
							// copy sigma[k][cur_seed] into tempSigma
							tempSigmaLength = length[k]+cur_seed_length-1;
							for (l=0; l<tempSigmaLength; ++l)
								tempSigma[l] = (k<cur_seed) ? sigma[k][cur_seed][l] : sigma[cur_seed][k][l];
							// update tempSigma to reflect swapping positions i(1) and j(0)
							UPDATE_SIGMA (OM, tempSigma, length, k, cur_seed, i, j);
							// compute the change in OC; the new sigma is in tempSigma
							k_cur_seed_OC = 0;
							for (l=0; l<tempSigmaLength; ++l)
								k_cur_seed_OC += (1 << (int)tempSigma[l]);
							curOC -= (k<cur_seed) ? OCM[k][cur_seed] : OCM[cur_seed][k];
							curOC += k_cur_seed_OC;
						}
						if (curOC < bestOC) {
							best_seed = cur_seed;
							best_i = i;
							best_j = j;
							bestOC = curOC;
							found_swap = 1;
						}
						// restore curOC
						curOC = oldOC;
					}
		}
		if (found_swap == 1) {
			no_swaps++;
			if (no_swaps >= weight * NO_SEEDS)   // no more than wk swaps are performed
				found_swap = 0; 
			// update sigmas
			for (k=0; k<NO_SEEDS; ++k) {
				i = (k < best_seed) ? k : best_seed;
				j = (k > best_seed) ? k : best_seed;
				UPDATE_SIGMA(OM, sigma[i][j], length, k, best_seed, best_i, best_j);
			}
			// change seeds
			SEEDS[best_seed][best_i] = '0';	
			SEEDS[best_seed][best_j] = '1';	
			// update overlap matrix OM
			for (k=0; k<NO_SEEDS; ++k) 
				UPDATE_OM(OM, length, k, best_seed, best_i, best_j);
			// update OC matrix (OCM)
			for (k=0; k<NO_SEEDS; ++k) {
				k_best_seed_OC = 0;
				for (l=0; l<length[k]+length[best_seed]-1; ++l) {
					tmp = (k < best_seed) ? (int)sigma[k][best_seed][l] : (int)sigma[best_seed][k][l];
					k_best_seed_OC += (1 << tmp);
				}
				i = (k < best_seed) ? k : best_seed;
				j = (k > best_seed) ? k : best_seed;
				OCM[i][j] = k_best_seed_OC;
			}			
			oldOC = curOC = bestOC;
		}
	} while(found_swap == 1);	
	return(bestOC);
}

// create array of size 32 bit or 64 bit or 128 bit according to N
// used to estimate the sensitivity
void makeHomologousRegion(double p, int N){
	
	if(isRegionCreated)
		return;
	
	std::random_device rd{}; // use to seed the rng
	std::mt19937 rng{rd()}; // rng
	std::bernoulli_distribution distribution(p);
	
	cout<<endl<<"Seeds found for which Real Sensitivity cannot be computed because of Insufficient Memory"<<endl;
	cout<<"Estimated Sensitivity will be used to prevent ALeS from Crashing!!!"<<endl<<endl;
	cout << "Creating array to estimate sensitivity ..." << endl;
	if(N <= 32){
		homologous_array_32 = new uint32_t[array_size];
		for(int i = 0; i < array_size; i++){	
			uint32_t rn = 0;
			for(int j = 0; j < N; j++)
				rn = ((rn<<1)+(distribution(rng)?1:0));
			homologous_array_32[i] = rn;
		}
	}
	else if(N > 32 && N <= 64){
		homologous_array_64 = new uint64_t[array_size];
		for(int i = 0; i < array_size; i++){
			uint64_t rn = 0;
			for(int j = 0; j < N; j++)
				rn = ((rn<<1)+(distribution(rng)?1:0));
			homologous_array_64[i] = rn;
		}
	}
	else{
		homologous_array_128 = new uint128_t[array_size];
		for(int i = 0; i < array_size; i++){
		uint128_t rn = 0;
		for(int j = 0; j < N; j++)
			rn = ((rn<<1)+(distribution(rng)?1:0));
		homologous_array_128[i] = rn;
		}
	}
}

// Calculate the estimated sensitivity using homologous_array created earlier.
double ESTIMATE_SENSITIVITY(char** SEEDS, int NO_SEEDS, long long N)
{
	int count = 0;
	mode = 1;
	if(N <= 32){	//if region length is <= 32
		uint32_t one_seed = 0, all_seeds[NO_SEEDS], one_region = 0;
		std::fill_n(all_seeds, NO_SEEDS, 0);
		if((int)strlen(SEEDS[0]) > (int)N)
			return 0;
		// converting seed set from char array to uint32_t array
		for(int i = 0; i < NO_SEEDS; i++){
			one_seed = 0;
			one_seed = std::stoull(SEEDS[i], 0, 2);
			all_seeds[i] = one_seed;
		}
		// calculating the number of hits
		for(int j = 0; j < array_size; j++){
			int flag = 0;
			for(int i = 0; i < NO_SEEDS; i++){
				if( (int)strlen(SEEDS[i]) > (int)N )
					continue;
				one_seed = all_seeds[i];
				one_region = homologous_array_32[j];
				for(int k = 0; k <= (int)(N - strlen(SEEDS[i])); k++){
					if( (one_region & (one_seed<<k)) == (one_seed<<k)){
						count++;
						flag = 1;
						break;
					}
				}
				if(flag == 1)
					break;
			} 
		}
		return (1.0*count/array_size);
	}
	else if(N > 32 && N <= 64){		//if region length is >32 but <= 64
			uint64_t one_seed = 0, all_seeds[NO_SEEDS], one_region = 0;
			std::fill_n(all_seeds, NO_SEEDS, 0);
			if((int)strlen(SEEDS[0]) > (int)N)
				return 0;
			// converting seed set from char array to uint64_t array
			for(int i = 0; i < NO_SEEDS; i++){
				one_seed = 0;
				one_seed = std::stoull(SEEDS[i], 0, 2);
				all_seeds[i] = one_seed;
			}
			// calculating the number of hits
			for(int j = 0; j < array_size; j++){
				int flag = 0;
				for(int i = 0; i < NO_SEEDS; i++){
					if( (int)strlen(SEEDS[i]) > (int)N )
						continue;
					one_seed = all_seeds[i];
					one_region = homologous_array_64[j];
					for(int k = 0; k <= (int)(N - strlen(SEEDS[i])); k++){
						if( (one_region & (one_seed<<k)) == (one_seed<<k)){
							count++;
							flag = 1;
							break;
						}
					}
					if(flag == 1)
						break;
				}
			}
			return (1.0*count/array_size);
	}
	else{			//if region length is >64 but <= 128
		uint128_t one_seed = 0, all_seeds[NO_SEEDS], one_region = 0;
		uint64_t upper = 0, lower = 0;
		std::fill_n(all_seeds, NO_SEEDS, 0);
		if((int)strlen(SEEDS[0]) >= (int)N)
			return 0;
	
		// converting seed set from char array to uint128_t array
		for(int i = 0; i < NO_SEEDS; i++){
			one_seed = 0;
			if(strlen(SEEDS[i]) < 65){
				lower = std::stoull(SEEDS[i], 0, 2);
				one_seed = lower;
			}
			else{
				lower = std::stoull(std::string(&SEEDS[i][0], &SEEDS[i][63]), 0, 2);
				upper = std::stoull(std::string(&SEEDS[i][64], &SEEDS[i][N]), 0, 2);
				one_seed = upper;
				one_seed = one_seed<<64;
				one_seed = one_seed|lower;
			}
			all_seeds[i] = one_seed;
		}
		// calculating the number of hits
		for(int j = 0; j < array_size; j++){
			int flag = 0;
			for(int i = 0; i < NO_SEEDS; i++){
				if( (int)strlen(SEEDS[i]) > (int)N )
					continue;
				one_seed = all_seeds[i];
				one_region = homologous_array_128[j];
				for(int k = 0; k <= (int)(N - strlen(SEEDS[i])); k++){
					if( (one_region & (one_seed<<k)) == (one_seed<<k)){
						count++;
						flag = 1;
						break;
					}
				}
				if(flag == 1)
					break;
			} 
		}
		return (1.0*count/array_size);
	}
}

// converts the reversed of the binary string s into integer
inline long long BinReversedToInt (char *s)	
{										// works also with * instead of 0
	long long val=0;
	long long l = strlen(s), i=0, temp=1;
	for(i=0; i<=l-1; i++)
	{
		if (s[i] == '1') val += temp;
		temp *= 2;
	}
	return(val);
}

// Computing sensitivity of a set of SEEDS with the given parameters using the dynamic programming of (Li et al., 2004)
double MultipleSensitivity(char** SEEDS, int NO_SEEDS, long long N, double P, double totalVirtualMem)
{
	long long i=0, j=0, b=0, pos=0, MAX_L=0, level=0, prev_level_start=0, prev_level_end=0, compatible=0,
	hit=0, suffix_link=0, zero_link=0, new_i=0, tmp=0;
	long long b_zero=0, b_one=0, MAX_NO_BS;
	double f0=0, f1=0, result = 0;
	long long **BS;
	
	// compute the lengths of the seeds and MAX_L = the length of the longest seed
	long long* seed_length = new long long [NO_SEEDS];
	for (i=0; i<=NO_SEEDS-1; i++) {
		seed_length[i] = strlen(SEEDS[i]);
		if (MAX_L < seed_length[i]) MAX_L = seed_length[i];
	}
	// compute the integer values of the reversed seeds INTeger REVersed SEEDS
	long long* INT_REV_SEEDS = new long long[NO_SEEDS];
	for (i=0; i<=NO_SEEDS-1; i++)
		INT_REV_SEEDS[i] = BinReversedToInt(SEEDS[i]); // !!! this works like * = 0
	// create the tree of BS --- 1..NO_BS-1 *********************************************************
	// BS[i][0] = the integer value of b^r (except for epsilon, any b starts with 1)
	// BS[i][1] = index j in BS of left son: BS[j][0] = integer value of b^r0 = (0b)^r (-1 if it doesn't exist)
	// BS[i][2] = index j in BS of right son: BS[j][0] = integer value of b^r1 = (1b)^r (-1 if it doesn't exist)
	// BS[i][3] = (suffix link) index j in BS of (B(b^r))^r i.e. BS[j][0] = integer value of (B(b^r))^r
	// BS[i][4] = 1 if b is a hit and 0 otherwise			//B(x) is the longest prefix of x that is in B
	// B = set of compatible but not hits b's
	// BS[i][5] = its level = the length of the string
	// BS[i][6] = the longest prefix of 0b which reversed means the longest suffix followed by a 0
	try{
		MAX_NO_BS = NO_SEEDS;
		for (i=0; i<=NO_SEEDS-1; i++) {		// compute maximum possible no of b's
			tmp = 1;
			for (j=strlen(SEEDS[i])-1; j>=0; j--) {
				if (SEEDS[i][j] != '1') tmp *= 2;
				MAX_NO_BS += tmp;        // add previous value if 1 in seed or double (tmp *= 2 above) if a * in seed
			}
		}
		long long NO_BS = MAX_NO_BS;
		// If memory is not sufficient to calculate real sensitivity, estimated sensitivity is used
		//7 is multiplied as BS[0].size = 7
		long double arraySize = ((NO_BS * 7 * 8.0) / (1024 * 1024 * 1024));
		double totalRam = (totalVirtualMem / (1024 * 1024 *1024) * 1.0);
		
		if(((totalRam * 0.9) < arraySize) || ((totalRam * 0.9) < (arraySize * floor(totalRam)))){		// try to filter using less expensive operations
			makeHomologousRegion(P, N);
			isRegionCreated = true;
			MAX_NO_BS = NO_BS = 0;
			delete[] seed_length; delete[] INT_REV_SEEDS;
			return ESTIMATE_SENSITIVITY(SEEDS, NO_SEEDS, N);
		}
		// bound for computing sensitivity (not allocate more than 120GB)
		BS = new long long *[NO_BS];
		for (i=0; i<=NO_BS-1; i++)	{
			BS[i] = new long long [7];
			BS[i][0] = BS[i][3] = BS[i][4] = BS[i][5] = BS[i][6] = 0; // initialize
			BS[i][1] = BS[i][2] = -1;
		}
		// create the tree by levels: all b's of length i are on level i
		BS[0][0] = 0; // epsilon
		BS[0][1] = -1; // no left son since b=0 is not compatible -- seeds end with 1
		BS[0][2] = 1; // right son is BS[1][0] = 1
		BS[0][3] = 0; // suffix link to itself
		BS[0][4] = 0; // epsilon is not hit
		BS[0][5] = 0;
		BS[0][6] = 0;
		BS[1][0] = 1;
		BS[1][3] = 0;
		BS[1][4] = 0; // assume 1 is not a hit
		BS[1][5] = 1;
		prev_level_start = 1; prev_level_end = 1; // indices in BS between which previous level is found
		pos = 2; // first empty position in BS
		for (level=2; level<=MAX_L; level++) { // complete level "level"
			for (i = prev_level_start; i <= prev_level_end; i++)
				if (BS[i][4] != 1) { // not a hit
					b = BS[i][0]; // integer value
					b_zero = 2 * b; // try b0
					compatible = 0; hit = 0;
					for (j=0; j<=NO_SEEDS-1; j++) 	// check long enough seeds to seee if b0 is compat/hit
						if (seed_length[j] >= level)
							if (((INT_REV_SEEDS[j] >> (seed_length[j] - level)) & (~b_zero)) == 0 ) {
								compatible = 1;
								if (level == seed_length[j])
									hit = 1;
							}
					if (compatible) {
						BS[i][1] = pos;
						BS[pos][0] = 2 * b;
						BS[pos][4] = hit; // hit = 1 if it is hit by a seed
						BS[pos][5] = level;
						suffix_link = BS[i][3];
						while ((suffix_link != 0) && (BS[suffix_link][1] == -1)) {
							suffix_link = BS[suffix_link][3];
						}
						if (suffix_link != 0) {
							BS[pos][3] = BS[suffix_link][1];
							if (BS[BS[pos][3]][4] == 1)		// if suffix link is hit then also itself is hit
								BS[pos][4] = 1;
						}
						pos++;
					}
					b_one = 2 * b + 1; // try b1
					compatible = 0; hit = 0;
					for (j=0; j<=NO_SEEDS-1; j++) 	// check all long enough seed to seee if b0 is compat/hit
						if (seed_length[j] >= level)
							if (((INT_REV_SEEDS[j] >> (seed_length[j] - level)) & (~b_one)) == 0 ) {
								compatible = 1;
								if (level == seed_length[j])
									hit = 1;
							}
					if (compatible) {
						BS[i][2] = pos;
						BS[pos][0] = 2 * b + 1;
						BS[pos][4] = hit; // hit = 1 if it is hit by a seed
						BS[pos][5] = level;
						suffix_link = BS[i][3];
						while (BS[suffix_link][2] == -1) {
							suffix_link = BS[suffix_link][3];
						}
						BS[pos][3] = BS[suffix_link][2];
						if (BS[BS[pos][3]][4] == 1)		// if suffix link is hit then also itself is hit
							BS[pos][4] = 1;
						pos++;
					}
				}
			prev_level_start = prev_level_end+1;
			prev_level_end = pos - 1;
		}
		// zero_links -- longest suffix of b0 in the tree
		for (i=1; i<=NO_BS-1; i++)
			if (BS[i][1] != -1)		// has left son, that is, 0-son
				BS[i][6] = BS[i][1];
			else {
				zero_link = BS[i][3];
				while ((zero_link != 0) && (BS[zero_link][1] == -1)) {
					zero_link = BS[zero_link][3];
				}
				if (zero_link != 0)
					BS[i][6] = BS[zero_link][1];
			}
		// compute the f's  f[i][j] = probab to hit a prefix of length i that ends with INT_TO_BIN_REVERSED[BS[j][0]]
		double **f;
		f = new double* [N+1];
		for (i=0; i<=N; i++) {
			f[i] = new double [NO_BS];
			for (j=0; j<=NO_BS-1; j++) f[i][j] = 0; // initialize
		}
		for (i=0; i<=N; i++) {
			for (j=NO_BS-1; j>=0; j--) {
				if (i==0) f[i][j] = 0;					// empty prefix of random region cannot be hit
				else if (i < BS[j][5]) f[i][j] = 0;		// too short
				else if (BS[j][4] == 1) f[i][j] = 1;	// hit
				else {
					new_i = i - BS[j][5] + BS[BS[j][6]][5] - 1;
					if (new_i < 0) new_i = 0;
					f0 = f[ new_i ][ BS[j][6] ];
					if (BS[j][2] < 0)
						f1 = 1;
					else
						f1 = f[ i ][ BS[j][2] ];
					f[i][j] = (1-P)*f0 + P*f1;
				}
			}
		}
		result = f[N][0];
		// free memory
		delete[] seed_length; delete[] INT_REV_SEEDS;
		for (i=0; i<=N; i++)
			delete[] f[i];
		delete[] f;
		for (i=0; i<=MAX_NO_BS-1; i++)
			delete[] BS[i];
		delete[] BS;
	}
	// to handle segmentation fault
	catch(std::bad_alloc){
		MAX_NO_BS = 0;
		delete[] seed_length; delete[] INT_REV_SEEDS;
		return ESTIMATE_SENSITIVITY(SEEDS, NO_SEEDS, N);
	}
	return(result);
}

// Allocates and initializes the seeds and then applies OC measure in order to find the locally best set
void ALLOCATE_RUN_FOR_MULTIPLE_SEED_FIXED_LENGTH_SWAP1(int w, int* l, char** OPT_SEEDS, int NO_SEEDS)
{
	int i=0, j=0;
	// initialize the seeds with 1**..*11..1
	for (i=0; i<=NO_SEEDS-1; i++) {
		OPT_SEEDS[i][0] = '1';
		for (j=1; j<=l[i]-w; j++) OPT_SEEDS[i][j] = '0';
		for (j=l[i]-w+1; j<=l[i]-1; j++) OPT_SEEDS[i][j] = '1';
		OPT_SEEDS[i][l[i]] = '\0';
	}
	char* s = new char[strlen(OPT_SEEDS[NO_SEEDS-1])+1];
	for (int i=0;i<l[NO_SEEDS-1];i++){
		s[i] = OPT_SEEDS[NO_SEEDS-1][i];
	}
	s[l[NO_SEEDS-1]]='\0';
	strcpy(OPT_SEEDS[NO_SEEDS-1],s);
	MULTIPLE_SWAP1_OVERLAPS_FAST(OPT_SEEDS, NO_SEEDS);
 }
 
int compare (const void * a, const void * b)
{
	return ( *(int*)a - *(int*)b );
}

// Heuristic algorithm for generating lengths of the seeds given minimum length m and maximum length M
void MAKE_L(int m, int M)
{
	int* cnt = new int[100]; // cnt has the number of each l[i]
	for (int i=0;i<100;i++){
		cnt[i] = 0;
	}
	int temp = M;
	l[0] = m; l[k-1] = M;
	cnt [l[0]] = 1; cnt[l[k-1]] = 1;
	bool isReachedToEnd = false;
	for(int i = 1;i < k-1;i++){
		if(!isReachedToEnd){
			l[i] = (int)ceil((double)(l[i-1]+M)/2.0);
		}
		else{
			l[i] = temp;
		}
		if (cnt[l[i]] < (int)ceil((double)(k)/(pow(2.0,M-l[i]+1)))){
			cnt[l[i]] = cnt[l[i]]+1;
		}
		else if (cnt[l[i]] == (int)ceil((double)(k)/(pow(2.0,M-l[i]+1)))){	
			isReachedToEnd = true;
			l[i] = l[i]-1;
			temp = l[i];
			cnt[l[i]] = cnt[l[i]]+1;
		}
		else{
			isReachedToEnd = true;
			cnt[l[i]] = cnt[l[i]]+1;
		}
	}qsort(l, k, sizeof (int), compare);
}

// Computes minimum and maximm seed length, m and M, from precomputed arrays or regressed lines
void PRECOMPUTE_MIN_MAX(int& m, int& M){
	if (p < 0.85){ // use 0.8 arrays seedLength_min_kiL and seedLength_max_kiL
		if (k == 2 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			m = seedLength_min_k2L[w-10][N-35];
			M = seedLength_max_k2L[w-10][N-35];
		}
		else if (k == 3 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			m = seedLength_min_k3L[w-10][N-35];
			M = seedLength_max_k3L[w-10][N-35];
		}
		else if (k == 4 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			m = seedLength_min_k4L[w-10][N-35];
			M = seedLength_max_k4L[w-10][N-35];
		}
		else if (k == 10 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			m = seedLength_min_k10L[w-10][N-35];
			M = seedLength_max_k10L[w-10][N-35];
		}
		else if (k == 16 && w == 11 && N == 64){
			m = 14;
			M = 27;
		}
		else{// In the minL and maxL cases the regression line was computed as follows:
			//  minL regression = -0.8222 - 0.3194k + 1.1497w + 0.0699N
			// maxL regression  = -0.4858 + 0.4339k + 1.2376w + 0.1586N
			m = (int)round(-0.8222 - 0.3194*k + 1.1497*w + 0.0699*N);
			M = (int)round(-0.4858 + 0.4339*k + 1.2376*w + 0.1586*N);
		}
	}else{ // use 0.9 arrays seedLength_min_kiH and seedLength_max_kiH
		if (k == 2 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			m = seedLength_min_k2H[w-10][N-35];
			M = seedLength_max_k2H[w-10][N-35];
		}
		else if (k == 3 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			m = seedLength_min_k3H[w-10][N-35];
			M = seedLength_max_k3H[w-10][N-35];
		}
		else if (k == 4 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			m = seedLength_min_k4H[w-10][N-35];
			M = seedLength_max_k4H[w-10][N-35];
		}
		else if (k == 10 && (w >= 10 && w <= 22) && (N >= 35 && N<= 100)){
			m = seedLength_min_k10H[w-10][N-35];
			M = seedLength_max_k10H[w-10][N-35];
		}
		else{// In the minH and maxH cases the regression line was computed as follows:
			//  minH regression =  -0.8101 - 0.3352k + 1.1914w + 0.0581N
			//  maxH regression  = -1.1686 + 0.3576k + 1.4462w + 0.1366N
			m =  (int)round(-0.8101 - 0.3352*k + 1.1914*w + 0.0581*N);
			M =  (int)round(-1.1686 + 0.3576*k + 1.4462*w + 0.1366*N);
		}
	}
	// used in resetting the adaptive length algorithm
	original_m = m;
	original_M = M;
}

//debugging - find m value
int find_m(char** S, int NO_SEEDS){
	int i = 0, min = strlen(S[0]);
	for(i = 0; i < NO_SEEDS; i++){
		int length = strlen(S[i]);
		if(length < min)
			min = length;
	}
	return min;
}

//debugging - find M value
int find_M(char** S, int NO_SEEDS){
	int i = 0, max = strlen(S[0]);
	for(i = 0; i < NO_SEEDS; i++){
		int length = strlen(S[i]);
		if(length > max)
			max = length;
	}
	return max;
}

//add a don't care at a random position in a random seed - indel optimization
int add_position(char** S, int* l, int NO_SEEDS, long long N){
	bool flag = true;
	int seed_no = -1, pos = -1, count = 0;
	while(flag){
		count++;
		if(count == 20)
			return -1;
		seed_no = std::rand()%NO_SEEDS;
		pos = std::rand()%(l[seed_no]);
		if(pos != 0 && pos != l[seed_no] - 1 && l[seed_no] < N)
			flag = false;
	}

	int length = l[seed_no];
	l[seed_no] = length + 1;
	char temp[length + 1];
	for(int i = 0; i < pos; i++)
		temp[i] = S[seed_no][i];
	temp[pos] = '0';
	for(int i = pos + 1; i < length + 1; i++)
		temp[i] = S[seed_no][i-1];
	for(int i = 0; i < (int)strlen(temp); i++)
		S[seed_no][i] = temp[i];
	S[seed_no][length + 1] = '\0';
	MULTIPLE_SWAP1_OVERLAPS_FAST(S,NO_SEEDS);

	return seed_no;
}

//remove a don't care at a random position in a random seed - indel optimization
int remove_position(char** S, int* l, int NO_SEEDS, long long N){
	bool flag = true;
	int seed_no = -1, pos = -1;
	int count = 0;
	while(flag){
		if(count == 20)
			return -1;
		seed_no = std::rand()%NO_SEEDS;
		pos = std::rand()%(l[seed_no]);
		if(S[seed_no][pos] == '0')
			if(pos != 0 && pos != l[seed_no] - 1){
				flag = false;
				count = 0;
			}
		count++;
	}

	int length = l[seed_no];
	//length--;
	l[seed_no] = length - 1;
	char temp[length - 1];
	for(int i = 0; i < pos; i++)
		temp[i] = S[seed_no][i];
	for(int i = pos + 1; i < length ; i++)
		temp[i - 1] = S[seed_no][i];
	for(int i = 0; i < (int)strlen(temp); i++)
		S[seed_no][i] = temp[i];
	S[seed_no][length - 1] = '\0';
	MULTIPLE_SWAP1_OVERLAPS_FAST(S,NO_SEEDS);

	return seed_no;
}

//try to further optimize locally found seed - indel optimization
char** findOptimal(char** seeds, int *l, int NO_SEEDS, long long N, double p, double curSens)
{
	int trial = 200, flag = 0;	// trial value determines the number of indel iterations
	double best = curSens;
	//create a copy seed array
	char** tSEEDS = new char* [NO_SEEDS];
	char** bestSEEDS = new char* [NO_SEEDS];
	char** prevSEEDS = new char* [NO_SEEDS];
	int * tl = new int [NO_SEEDS];
	for(int j = 0; j < NO_SEEDS; j++){
		tSEEDS[j] = new char[100];
		bestSEEDS[j] = new char[100];
		prevSEEDS[j] = new char[100];
	}
	// copying values from l to tl
	for(int j = 0 ; j < NO_SEEDS; j++)
		tl[j] = l[j];
	
	for(int i = 1; i <= trial; i++){
		mode = 0;
		int  choice = std::rand()%2;
		// copy values from SEED to tSEED
		if(i == 1){
			for(int j = 0; j < NO_SEEDS; j++){
				for(int k = 0; k < 100; k++){
						tSEEDS[j][k] = seeds[j][k];
						bestSEEDS[j][k] = seeds[j][k];
						prevSEEDS[j][k] = seeds[j][k];
				}
				bestSEEDS[j][l[j]] = '\0';
				prevSEEDS[j][l[j]] = '\0';
			}
		}
		// try to increase sensitivity by adding random don't care position
		else if(choice == 1){
			for(int i = 0; i < NO_SEEDS; i++){
	 			for(int j = 0 ; j < 100; j++)
					prevSEEDS[i][j] = tSEEDS[i][j];
				prevSEEDS[i][tl[i]]= '\0';
			}
			int t = add_position(tSEEDS, tl, NO_SEEDS, N);
			if(t == -1){
				for(int i = 0; i < NO_SEEDS; i++){
					for(int j = 0 ; j < 100; j++){
						tSEEDS[i][j] = prevSEEDS[i][j];
						tl[i] = strlen(tSEEDS[i]);
						l[i] = strlen(tSEEDS[i]);
					}
					tSEEDS[i][tl[i]]= '\0';
				}
				continue;
			}
			best = MultipleSensitivity(tSEEDS, NO_SEEDS, N, p, totalVirtualMem);
			if(best > curSens){
				for(int i = 0; i < NO_SEEDS; i++){
					for(int j = 0 ; j < 100; j++){
						bestSEEDS[i][j] = tSEEDS[i][j];
						flag = 1;
						tl[i] = strlen(tSEEDS[i]);
					}
					bestSEEDS[i][tl[i]]= '\0';
					l[i] = tl[i];
				}
				curSens = best;
				bestMode = mode;
				optimized_best = curSens;
			}else{
				for(int i = 0; i < NO_SEEDS; i++){
					for(int j = 0 ; j < 100; j++){
						tSEEDS[i][j] = prevSEEDS[i][j];
						tl[i] = strlen(tSEEDS[i]);
						l[i] = strlen(tSEEDS[i]);
					}
					tSEEDS[i][tl[i]]= '\0';
				}
			}
		}			
		// try to increase sensitivity by removing random don't care position
		else{
			for(int i = 0; i < NO_SEEDS; i++){                       
	 			for(int j = 0 ; j < 100; j++)
					prevSEEDS[i][j] = tSEEDS[i][j];
				prevSEEDS[i][tl[i]]= '\0';
		    }
			int t = remove_position(tSEEDS, tl, NO_SEEDS, N);
			if(t == -1){
				for(int i = 0; i < NO_SEEDS; i++){
					for(int j = 0 ; j < 100; j++){
						tSEEDS[i][j] = prevSEEDS[i][j];
						tl[i] = strlen(tSEEDS[i]);
						l[i] = strlen(tSEEDS[i]);
					}
					tSEEDS[i][tl[i]]= '\0';
				}
				continue;
			}
			best = MultipleSensitivity(tSEEDS, NO_SEEDS, N, p, totalVirtualMem);
			if(best > curSens){
				for(int i = 0; i < NO_SEEDS; i++){
					for(int j = 0 ; j < 100; j++){
						bestSEEDS[i][j] = tSEEDS[i][j];
						flag = 1;
						tl[i] = strlen(tSEEDS[i]);
					}
					bestSEEDS[i][tl[i]] = '\0';
					l[i] = tl[i];
				}
				curSens = best;
				bestMode = mode;
				optimized_best = curSens;
			}else{
				for(int i = 0; i < NO_SEEDS; i++){
					for(int j = 0 ; j < 100; j++){
						tSEEDS[i][j] = prevSEEDS[i][j];
						tl[i] = strlen(tSEEDS[i]);
						l[i] = strlen(tSEEDS[i]);
					}
					tSEEDS[i][tl[i]]= '\0';
				}
			}
		}
	}
	delete[] tl;
	delete[] tSEEDS;
	delete[] prevSEEDS;
	if(flag == 1)
		return bestSEEDS;
	else
		return seeds;
}

// ALeS tries to compute random seeds with random lengths within the interval [min, max+1] that was computed by PRECOMPUTE_MIN_MAX function and then applies OC on those random seeds.
double RANDOM_START_SWAP_FOR_OC_WITH_RANDOM_LENGTH(int m, int M, int weight, int* length, char** seeds, int nSeeds, int tries, int N, double p, double bestSens)
{
	int i=0, j=0, j1=0, k=0, pos=0, old_m = m, old_M = M, badMove = 0;
	double curSens = 0.0;
	double avg_m = 0.0, avg_M = 0.0;	
	//srand((unsigned )(time(0)));
	double t[2] = {0, 0};
	
	t[0] = clock()/ 1000000.0;
	for (k=0; k<tries; k++) { // try "tries" times starting with random seeds and OC them
	cout<<k<<endl;
		// initialize seeds randomly
		badMove++;
		if(nSeeds == 1){
			for(i = 0;i < nSeeds;i++)
			length[i] = rand()%(M-m+1) + m;
		}
		// adaptive seed lengths - use the mean of the seed lengths obtained after indel optimization.
		// adapth the seed length after every 50 iterations.
		//If after 50 loops, no good seed is discovered, m and M are reset to original values
		if(k % 50 == 0 && k > 0){
			m = (int)round(avg_m/50.0);
			M = (int)round(avg_M/50.0);
			if(badMove == 49){
				badMove = 0;
				m = original_m;
				M = original_M;
				old_m = m;
				old_M = M;
			}
			MAKE_L(m,M);
			ALLOCATE_RUN_FOR_MULTIPLE_SEED_FIXED_LENGTH_SWAP1(weight, length, seeds, nSeeds);
			avg_m = 0.0; avg_M = 0.0;
			old_m = m; old_M = M;
		}else{
			m = old_m;
			M = old_M;
			if(badMove == 49){
				badMove = 0;
				m = original_m;
				M = original_M;
				old_m = m;
				old_M = M;
			}
			MAKE_L(m,M);
			ALLOCATE_RUN_FOR_MULTIPLE_SEED_FIXED_LENGTH_SWAP1(weight, length, seeds, nSeeds);
		}
		mode = 0;
		qsort(length, nSeeds, sizeof (int), compare);
		for (i=0; i<nSeeds; i++) { // ith seed
			for (j=1; j<length[i]-1; j++)
				seeds[i][j] = '0';
			seeds[i][0] = '1';
			seeds[i][length[i]-1] = '1';
			seeds[i][length[i]] = '\0';
			for (j=2; j<weight; j++) {
				pos = rand()%(length[i]-j) + 1;
				j1=0;
				while (pos>0) {
					if (seeds[i][j1] == '0')
						pos--;
					j1++;
				}
				seeds[i][j1-1] = '1';
			}
		}
		// swap
		MULTIPLE_SWAP1_OVERLAPS_FAST(seeds, nSeeds);
		curSens = MultipleSensitivity(seeds, nSeeds, N, p, totalVirtualMem);
		if (curSens != -1){
			char** bestSEEDS = new char* [nSeeds];
			for(i = 0; i < nSeeds; i++)
				bestSEEDS[i] = new char[100];
			// try to further improve sensitivity for each locally found maximum using indel optimization
			bestSEEDS =  findOptimal(seeds, length, nSeeds, N, p, curSens);
			if(optimized_best > curSens){
				curSens = optimized_best;
				seeds = bestSEEDS;
			}
			else
				bestMode = mode;
			// calculate the average m and average M value, which will be used in adaptive length
			int min = strlen(seeds[0]), max = strlen(seeds[0]);
			for(i = 0; i < nSeeds; i++){
				int length = strlen(seeds[i]);
				if(length < min)
					min = length;
				if(length > max)
					max = length;
			}
			avg_m += min;
			avg_M += max;
			if (curSens > bestSens) {
				badMove = 0;
				bestSens = curSens;		
				t[1] = clock()/ 1000000.0;
				cout << "\n --- random try number " << k << " --- " << endl;
				cout << "seeds: " << endl;
				for (i=0; i<nSeeds; i++)
					cout << seeds[i] << endl;
				if(!bestMode)
					cout << "Real sensitivity = " << bestSens << endl;
				else{
					if(estCount == 0){
						//cout<<endl<<"Seeds found for which Real Sensitivity cannot be computed because of Insufficient Memory"<<endl;
						//cout<<"Estimated Sensitivity will be used to prevent ALeS from Crashing!!!"<<endl;
						estCount = 1;
					}
					cout << "Estimated sensitivity = " << bestSens <<endl<<endl;
				}
				cout <<"time (since beginning): "<<t[1]-t[0]<< endl << flush;
			}
		}
	}
	// work with real sensitivity
	cout << endl << "Best sensitivity is " << bestSens << endl;
	cout<<endl;
	cout << "Computed in " << t[1]-t[0] << " seconds" << endl << endl;
	return bestSens;
}

// ALeS initial seed gives the first set by applying Overlap Complexity (OC) measure on the initial seeds.
// This set is called ALeS-initial seed. Then the program tries to improve the seeds by computing random seeds and applying OC on them.
void ALeS(char** S){
	
	srand((unsigned )(time(0)));
	double t[2];
	// calculating the total memory available in the system to prevent the code from crashing while computing sensitivity.
	//total virtual memory of the system is total memory available - (1.5 time the size of homologous array)
	//1.5 times the size is used for safety
	
	//if linux system detected
	#if defined(__linux__) || defined(__linux) || defined(linux) || defined(__gnu_linux__)
        struct sysinfo si;
        sysinfo (&si);
        totalVirtualMem = (si.totalram + si.totalswap);
        totalVirtualMem *= si.mem_unit;
		totalVirtualMem -= 1.5 * homologous_array_size;
	//if apple system detected
    #elif defined(__APPLE__)
		long long memSize;
		size_t length = sizeof(long long);
		int mib[4] = {0,0,0,0};
		size_t miblen = sizeof(mib)/sizeof(int);
		sysctlnametomib("hw.memsize", mib, &miblen);
		int iError = sysctl(mib, 2, &memSize, &length, NULL, 0);
		if(iError != 0)
			cout<<"Error calculating memory"<<endl;
		totalVirtualMem = memSize;
		totalVirtualMem-= 1.5 * homologous_array_size;
	#endif
	
	t[0] = clock()/ 1000000.0;
	int m = 0;// min
	int M = 0;// max
	
	PRECOMPUTE_MIN_MAX(m,M);
	// ensuring that w <= m <= M
	if (m < w) m = w;
	if (M < m) M = m;
	
	cout<<"Generating "<< k << " seeds of weight "<<w<<" for similarity level "<< p <<" and length of homology region "<< N<<endl<<endl;
	
	if (k == 1){
		m = w+1; // try a wide range of lengths for single seeds
		cout << "The program starts computing ..."<<endl;
		cout << "If you reach a seed with your desired sensitivity you can kill the program ... "<<endl;
		cout<< endl;
		RANDOM_START_SWAP_FOR_OC_WITH_RANDOM_LENGTH(m, M, w, l, S, k, 500, N, p, 0);
	}
	else{
		MAKE_L(m,M);
		ALLOCATE_RUN_FOR_MULTIPLE_SEED_FIXED_LENGTH_SWAP1(w, l, S, k);
		t[1] = clock()/ 1000000.0;
		cout << "ALeS initial seed set is: "<<endl<<endl;
		printArray2(S,k);
		cout << "Computed in "<<t[1]-t[0]<< " seconds" << endl;
		cout<< endl;
		double sensitivity = 0.0;
		sensitivity = MultipleSensitivity(S, k, N, p , totalVirtualMem);
		bestMode = mode;
		if(!bestMode)
			cout << "Real Sensitivity is " << sensitivity << endl;
		else{
			if(estCount == 0){
				//cout<<endl<<"Seeds found for which Real Sensitivity cannot be computed because of Insufficient Memory"<<endl;
				//cout<<"Estimated Sensitivity will be used to prevent ALeS from Crashing!!!"<<endl<<endl;
				estCount = 1;
			}
			cout<< "Estimated Sensitivity is "<<sensitivity<<endl;
		}
		cout<<endl;
		cout << "The program starts computing better seeds ..."<<endl;
		cout << "If you reach a set of seeds with your desired sensitivity you can kill the program ... "<<endl;
		
		for(int i = 0;i < k;i++){
			S[i] = new char[100];
		}
		RANDOM_START_SWAP_FOR_OC_WITH_RANDOM_LENGTH(m, M, w, l, S, k, 500, N, p, sensitivity);
	}
}

//verbose mode
void verbose(){
	
	cerr << "Four arguments required; different number given\n"
		<< "command line should be:\n"
		<< "./ALeS <weight> <numberOfSeeds> <similarity> <lengthOfHomologyRegion>\n";
	cerr<<" <weight> : Number of match positions in each seed"<<endl;
	cerr<<" <numberOfSeeds> : Number of seeds"<<endl;
	cerr<<" <similarity> : Similarity level"<<endl;
	cerr<<" <lengthOfHomologyRegion> : Length of homologous region"<<endl;
}

// MAIN 
int main(int argc, char **argv) 
{
	double ttime[2] = {0, 0};
	ttime[0] = clock()/ 1000000.0;
	
	if (argc != 5) {
		verbose();
		exit(1);
	}
	// set parameters`
	w = atoi(argv[1]);  // weight
	k = atoi(argv[2]);  // number of seeds
	p = atof(argv[3]);  // similarity
	N = atoi(argv[4]);  // length of homology region
	l = new int[k];		// seeds' lengths array
	
	//calculating the array size in advance required for estimating sensitivity
	if(N <= 32)
		homologous_array_size = array_size * sizeof(uint32_t);
	else if(N <= 64) 
		homologous_array_size = array_size * sizeof(uint64_t);
	else
		homologous_array_size = array_size * sizeof(uint128_t);
	
	char** S = new char* [k];   // set of seeds
	for(int i = 0;i < k;i++)
		S[i] = new char[100];
	try{
		if(w < 1 || w >= N){
			cerr<<"Invalid seed weight !!!"<<endl;
			verbose();
			return 1;
		}
		if(k < 1){
			cerr<<"Invalid number of seeds !!!"<<endl;
			verbose();
			return 1;
		}
		if(p < 0 || p > 1){
			cerr<<"Invalid similarity level !!!"<<endl;
			verbose();
			return 1;
		}
		if(N <= 0 || N > 127){
			cerr<<"Invalid region length !!!"<<endl;
			verbose();
			return 1;
		}
		ALeS(S);
	}catch(std::bad_alloc){
		cerr << "Memory error (Allocation failed)"<<endl
		<<"You probably need more memory to run this program"<<endl;
	}
	ttime[1] = clock()/ 1000000.0; 
	cout << "Total time (500 iterations): " << ttime[1]-ttime[0]<< " seconds" << endl;
	return 0;
}
